import datetime
import random

from aiogram.types import Message

import api.google
import api.openai
import db
from main import start_time
from utils import log_command


def format_timedelta(td):
    total_seconds = int(td.total_seconds())
    days = total_seconds // 86400
    hours = (total_seconds % 86400) // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω")
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if seconds > 0 or not parts:
        parts.append(f"{seconds} —Å–µ–∫")
    return ', '.join(parts)


async def status_command(message: Message):
    if await db.is_blacklisted(message.from_user.id):
        await message.reply("‚ùå <b>–í—ã –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.</b>")
        return
    if await db.is_blacklisted(message.chat.id):
        await message.reply("‚ùå <b>–≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª –≤–Ω–µ—Å—ë–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—é–¥–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.</b>")
        return

    await log_command(message)

    messages = await db.get_messages(message.chat.id)

    messages_limit = await db.get_chat_parameter(message.chat.id, "message_limit")
    endpoint = await db.get_chat_parameter(message.chat.id, "endpoint")
    model = await db.get_chat_parameter(message.chat.id, endpoint[0] + "_model")
    rate_limit = await db.get_chat_parameter(message.chat.id, "max_requests_per_hour")

    request_count = await db.get_request_count(message.chat.id, datetime.timedelta(hours=1))
    uptime = datetime.datetime.now() - start_time

    token_count_text = "‚è± –°–µ–∫—É–Ω–¥—É..." if endpoint == "google" else str(
        await api.openai.count_tokens(message.chat.id)) + " —Ç–æ–∫–µ–Ω–æ–≤"
    quota_text = "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" if rate_limit == 0 else f"{request_count}/{rate_limit}"
    if request_count >= rate_limit:
        quota_text = quota_text + " ‚ö†Ô∏è"

    text_to_send = f"""üëã <b>–Ø —Ç—É—Ç!</b>

üí¨ <b>–ü–∞–º—è—Ç—å:</b> {len(messages)}/{messages_limit} —Å–æ–æ–±—â–µ–Ω–∏–π <i>({token_count_text})</i>
‚ú® <b>–ú–æ–¥–µ–ª—å:</b> <i>{model}</i>
üìä <b>–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å:</b> <i>{quota_text}</i>

üÜî <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>
‚è± <b>–ê–ø—Ç–∞–π–º:</b> {format_timedelta(uptime)}
"""
    if random.randint(1, 6) == 3 or request_count >= rate_limit:
        text_to_send += "\n‚ÑπÔ∏è <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –±–æ—Ç–æ–º?</b> - /feedback"

    reply = await message.reply(text_to_send)

    if endpoint == "google":
        token_count_text = await api.google.count_tokens_for_chat(message)
        text_to_send = text_to_send.replace("‚è± –°–µ–∫—É–Ω–¥—É...", f"{token_count_text} —Ç–æ–∫–µ–Ω–æ–≤")
        await reply.edit_text(text_to_send)
