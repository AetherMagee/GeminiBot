import difflib
import itertools
import traceback
from typing import List

from aiogram.types import Message, ReactionTypeEmoji
from loguru import logger

import db
from main import bot, ADMIN_IDS
from utils import log_command
from utils.definitions import chat_configs
from utils.frange import FloatRange


async def settings_command(message: Message) -> None:
    await log_command(message)
    command = message.text.split(" ", maxsplit=1)
    chat_endpoint = await db.get_chat_parameter(message.chat.id, "endpoint")
    show_advanced = await db.get_chat_parameter(message.chat.id, "show_advanced_settings")
    available_parameters = chat_configs["all_endpoints"] | chat_configs[chat_endpoint]
    if len(command) == 1:
        text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:</b> \n"

        for parameter in available_parameters.keys():
            if available_parameters[parameter]["advanced"] and not show_advanced:
                continue

            if parameter not in chat_configs["all_endpoints"] and "===" not in text:
                text += "\n<b>============</b>"
            text += f"\n<code>{parameter}</code> - {await db.get_chat_parameter(message.chat.id, parameter)} "

        text += ("\n\n<b>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É:</b> /settings [–ø–∞—Ä–∞–º–µ—Ç—Ä]\n<b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> "
                 "/set [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]")

        await message.reply(text)
    else:
        requested_parameter = command[1].lower()

        if requested_parameter not in available_parameters.keys():
            await message.reply("‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä</b>")
            return

        current_value = await db.get_chat_parameter(message.chat.id, requested_parameter)
        try:
            default_value = available_parameters[requested_parameter]['default_value'].replace("\'", "")
        except AttributeError:
            default_value = str(available_parameters[requested_parameter]['default_value'])

        text = f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{requested_parameter}</code>:\n"
        text += f"<i>{available_parameters[requested_parameter]['description']}</i>\n"
        text += "<b>–ó–Ω–∞—á–µ–Ω–∏—è:</b> \n"
        text += f"–ù—ã–Ω–µ—à–Ω–µ–µ: {current_value} | "
        text += f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: {default_value} | "

        _value_range = available_parameters[requested_parameter]['accepted_values']
        if isinstance(_value_range, range):
            accepted_values = f"{_value_range.start}-{_value_range.stop}"
        elif isinstance(_value_range, FloatRange):
            accepted_values = f"{_value_range[0]}‚Äî{_value_range[-1]}, —à–∞–≥ {round(_value_range[1] - _value_range[0], 2)}"
        else:
            try:
                accepted_values = ", ".join(_value_range)
            except Exception:
                accepted_values = "True, False"

        text += f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ: {accepted_values}"

        if available_parameters[requested_parameter]["protected"]:
            text += "\n‚ö†Ô∏è <b>–≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—â–∏—â—ë–Ω - –µ–≥–æ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞.</b>"

        await message.reply(text)


async def set_command(message: Message) -> None:
    await log_command(message)
    if message.chat.id != message.from_user.id and message.from_user.id not in ADMIN_IDS:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        if member.status not in ["administrator", "creator"]:
            await message.reply("‚ùå <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.</b>")
            return

    command = message.text.split(" ", maxsplit=2)
    if len(command) < 2:
        await message.reply("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.</b>")

    requested_parameter = command[1].lower()
    chat_endpoint = await db.get_chat_parameter(message.chat.id, "endpoint")
    available_parameters = chat_configs["all_endpoints"] | chat_configs[chat_endpoint]

    if requested_parameter not in available_parameters.keys():
        await message.reply("‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.</b>")
        return

    requested_value = command[2].lower()
    if available_parameters[requested_parameter]["type"] == "integer":
        try:
            requested_value = int(requested_value)
        except ValueError:
            requested_value = None
    elif available_parameters[requested_parameter]["type"] == "decimal":
        try:
            requested_value = float(requested_value)
        except ValueError:
            requested_value = None
    elif available_parameters[requested_parameter]["type"] == "boolean":
        try:
            if requested_value == "true" or requested_value == "1":
                requested_value = True
            elif requested_value == "false" or requested_value == "0":
                requested_value = False

        except ValueError:
            requested_value = None

    if requested_value not in available_parameters[requested_parameter]['accepted_values']:
        reply_text = "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.</b> "
        if available_parameters[requested_parameter]["type"] == "text":
            probable_value = difflib.get_close_matches(requested_value,
                                                       available_parameters[requested_parameter]['accepted_values'],
                                                       1,
                                                       0.4)
            if len(probable_value) > 0:
                reply_text += f"–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <code>{probable_value[0]}</code>?"
        await message.reply(reply_text)
        return

    if available_parameters[requested_parameter]["protected"]:
        if message.from_user.id not in ADMIN_IDS:
            await message.reply("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞, "
                                "–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.</b>")
            return

    try:
        await db.set_chat_parameter(message.chat.id, requested_parameter, requested_value)
        await message.react([ReactionTypeEmoji(emoji="üëå")])
    except Exception as e:
        logger.error(e)
        traceback.print_exc()
        await message.reply("‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.</b>")
        return
