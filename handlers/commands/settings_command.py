import difflib
from decimal import Decimal, ROUND_HALF_UP

from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ReactionTypeEmoji
from loguru import logger

import db
from main import ADMIN_IDS, bot
from utils import log_command
from utils.definitions import chat_configs
from utils.frange import FloatRange

pending_sets = {
    # user_id: [target_chat, target_param, has_notified]
}


def obfuscate_string(s: str) -> str:
    if s == "None" or s is None:
        return str(s)

    prefix = ""
    if s.startswith("https://"):
        prefix = "https://"
        s = s[len("https://"):]  # Remove the prefix for obfuscation

    if len(s) <= 10:
        obfuscated = '*' * len(s)
    else:
        obfuscated = s[:4] + '*' * (len(s) - 8) + s[-4:]

    return prefix + obfuscated


async def settings_command(message: Message) -> None:
    await log_command(message)
    command = message.text.split(" ", maxsplit=1)
    chat_endpoint = await db.get_chat_parameter(message.chat.id, "endpoint")
    show_advanced = await db.get_chat_parameter(message.chat.id, "show_advanced_settings")
    try:
        available_parameters = chat_configs["all_endpoints"] | chat_configs[chat_endpoint]
    except KeyError:
        available_parameters = chat_configs["all_endpoints"]

    async def get_current_value(chat_id: int, param: str):
        value = await db.get_chat_parameter(chat_id, param)
        if isinstance(value, Decimal):
            value = value.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)

        if available_parameters[param]["private"] and isinstance(value, str):
            value = obfuscate_string(value)

        return value

    if len(command) == 1:
        text = "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:</b> \n"

        have_separated = False
        for parameter in available_parameters.keys():
            if available_parameters[parameter]["advanced"] and not show_advanced:
                continue

            if parameter not in chat_configs["all_endpoints"] and not have_separated:
                text += "\n"
                have_separated = True

            current_value = await get_current_value(message.chat.id, parameter)
            text += f"\n<code>{parameter}</code> - {current_value} "

        text += ("\n\n‚ùî <b>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É:</b> /settings <i>[–ø–∞—Ä–∞–º–µ—Ç—Ä]</i>\nüíæ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ "
                 "–∑–Ω–∞—á–µ–Ω–∏–µ:</b> /set <i>[–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]</i>")

        await message.reply(text)
    else:
        requested_parameter = command[1].lower()

        if requested_parameter not in available_parameters.keys():
            await message.reply("‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä</b>")
            return

        current_value = await get_current_value(message.chat.id, requested_parameter)

        try:
            default_value = available_parameters[requested_parameter]['default_value'].replace("\'", "")
        except AttributeError:
            default_value = str(available_parameters[requested_parameter]['default_value'])

        text = f"‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{requested_parameter}</code>:\n"
        text += f"<i>{available_parameters[requested_parameter]['description']}</i>\n\n"
        text += "‚ùî <b>–ó–Ω–∞—á–µ–Ω–∏—è:</b> \n"
        text += f"<b>–ù—ã–Ω–µ—à–Ω–µ–µ: <i>{current_value}</i></b>"
        if default_value != "None":
            text += f"\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: {default_value}"

        _value_range = available_parameters[requested_parameter]['accepted_values']
        if isinstance(_value_range, range):
            accepted_values = f"{_value_range.start}-{_value_range.stop}"
        elif isinstance(_value_range, FloatRange):
            accepted_values = f"{_value_range[0]}‚Äî{_value_range[-1]}, —à–∞–≥ {round(_value_range[1] - _value_range[0], 2)}"
        else:
            try:
                accepted_values = ", ".join(_value_range)
            except TypeError:
                accepted_values = "True, False"

        if _value_range:
            text += f"\n–î–æ–ø—É—Å—Ç–∏–º—ã–µ: {accepted_values}"

        if available_parameters[requested_parameter]["protected"]:
            text += "\n\n‚ö†Ô∏è <b>–≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—â–∏—â—ë–Ω - –µ–≥–æ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞.</b>"

        await message.reply(text, disable_web_page_preview=True)


async def validate_and_set_parameter(chat_id: int, parameter_name: str, value: str, user_id: int) -> str or None:
    # Fetch the chat's endpoint
    chat_endpoint = await db.get_chat_parameter(chat_id, "endpoint")
    try:
        available_parameters = chat_configs["all_endpoints"] | chat_configs[chat_endpoint]
    except KeyError:
        available_parameters = chat_configs["all_endpoints"]

    # Verify parameter existence
    if parameter_name not in available_parameters.keys():
        matching_parameters = [param for param in available_parameters.keys() if param.startswith(parameter_name)]
        if len(matching_parameters) == 1:
            parameter_name = matching_parameters[0]
        elif not matching_parameters:
            return "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.</b>"

    # Check if the parameter is protected
    if available_parameters[parameter_name]["protected"] and user_id not in ADMIN_IDS:
        return ("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ "
                "–∏–∑–º–µ–Ω–∏—Ç—å.</b>")

    # Handle type conversions
    parameter_type = available_parameters[parameter_name]["type"]
    try:
        if parameter_type == "integer":
            value = int(value)
        elif parameter_type == "decimal":
            value = float(value)
        elif parameter_type == "boolean":
            value = value.lower() in ["true", "1"]
    except ValueError:
        return "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.</b>"

    # Validate against accepted values
    accepted_values = available_parameters[parameter_name]['accepted_values']
    if accepted_values and value not in accepted_values:
        if isinstance(accepted_values, (range, FloatRange)):
            if not (accepted_values.start <= value <= accepted_values.stop):
                return "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.</b>"
        else:
            matching_values = difflib.get_close_matches(value, accepted_values, 1, 0.4)
            if matching_values:
                return f"–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <code>{matching_values[0]}</code>?"

    # Set the parameter in the database
    await db.set_chat_parameter(chat_id, parameter_name, value)


async def set_command(message: Message) -> None:
    await log_command(message)
    command = message.text.split(" ", maxsplit=2)

    if len(command) < 3:
        await message.reply("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.</b>")
        return

    parameter_name = command[1].lower()
    value = command[2]
    chat_id = message.chat.id
    user_id = message.from_user.id

    result_msg = await validate_and_set_parameter(chat_id, parameter_name, value, user_id)
    if not result_msg:
        await message.react([ReactionTypeEmoji(emoji="üëå")])
        return
    await message.reply(result_msg)


async def handle_private_setting(message: Message):
    global pending_sets

    if message.from_user.id not in pending_sets.keys():
        logger.warning(f"Was just called but the ID ({message.from_user.id}) is not in the pending list.")
        await message.reply("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à—ë–ª –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Å–±–æ–π.</b>")
        return

    pending_set = pending_sets[message.from_user.id]

    if not pending_set[2]:
        await bot.send_message(message.from_user.id,
                               f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <code>{pending_set[1]}</code"
                               f">. –û–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —á–∞—Ç–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {pending_set[0]}</b>\n<i>(–µ–≥–æ "
                               f"–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /status –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ)</i>")
        pending_set[2] = True
        return

    if pending_set[1] == "null" or pending_set[1] == "none":
        pending_set[1] = None

    await db.set_chat_parameter(pending_set[0], pending_set[1], message.text)
    await message.reply("‚úÖ <b>–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>")

    try:
        await bot.edit_message_text("‚úÖ <b>–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>", chat_id=pending_set[0], message_id=pending_set[3])
    except TelegramBadRequest:
        logger.warning(f"Failed to edit message {pending_set[3]} at {pending_set[0]}")

    pending_sets.pop(message.from_user.id)
